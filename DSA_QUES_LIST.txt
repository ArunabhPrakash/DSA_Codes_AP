ALL DSA QUESTIONS AND CONCEPTS (343)
[]=pg in notes, and if from LC or also on LC or someother source then mentioned
MS=my sol folder
**POINTERS:[1-5,13],also in topic 5
**TC (ASYMPTOTIC NOTATIONS):[6-7,29-31],also in topic 9

1.	ARRAYS

1.	Linear Search - [done]
2.	Binary Search (recursion)-[69]
3.	Array reverse-[8]
4.	Printing Pairs-[8]
5.	Printing Subarrays-[8]
6.	Subarray sum 1-[8]
7.	Subarray sum 2 (prefix sum)-[8]
8.	Subarray sum 3 (Kadane’s)-[9]
9.	Vector intro and STL -[14,15]
10.	Largest element - [done,MS]
11.	Max subarray sum
12.	Lower bound - [9]
13.	Sorted Pair sum
14.	K-rotate- [9]
15.	FizzBuzz - [done]
16.	Pairs-[58]
17.	Triplets-[58]
18.	Mountain-[58]
19.	Longest Band-[58]
20.	Rains-[59]
21.	Subarray Sort-[60]
22.	Minimum Swaps-[61]
23.	Min Difference-[61]
24.	Array Products-[61]
25.	Busy Life-[61]
26.	Vector: sorting cabs-[done]
27.	Vector: Sort fruits-[done]
28.	Vector: Rotate Image-[done]
29.	Vector: Make zeroes-[done]
30.	Next Permutation - LC(gorseet) [done, in new pages]
31.	Find Pivot Index - LC(gorseet interview) [done in new pages]
32. 	Max nonoverlap subarr sum - LC,cvent [done in new pages,not running]

2.	SORTING/SEARCHING (LIN BINARY) (Divide and conquer)

1.	Bubble Sort-[9]
2.	Optimised Bubble Sort-[62]
3.	Insertion Sort-[9]
4.	Selection Sort-[10]
5.	Inbuilt Sort-[11]
6.	Counting Sort-[11]
7.	Sorting with Comparator-
8.	Sorting Cartesian Points-
9.	Chopsticks-[62]
10.	Defense Kingdom-[62]
11.	Merge Sort-[24]
12.	Quick Sort-[24]
13.	Inversion Count also Local / Global inversion count (also in LC) - [69]
14.	Quick Select (both kth largest and kth smallest) (also in LC) - [69]
15.	Smallest String - [70]
16.	Sparse Search - [new pages]
17.	Staircase Search - [new pages]
18.	ICPC standings - [70] (running,same page updated offline)
19.	Juggling Balls - [70] 
20.	Sorting Subarray - [done in notes latest]-write code,https://leetcode.com/problems/shortest-unsorted-continuous-subarray/
21.	Frequency Count 1 - [71]
22.	Frequency Count 2 - [71]
23.	Rotated arr Search-[25]
24.	Finding Roots-[71]
25.	Angry Birds
26.	Min pairs - [71]
27.	Game of Greed - [71]
28.	Reading Books - [72][not done]

3.	CHAR ARR/ STRINGS

1.	Using Cin.get()/cin.getline()-[10]
2.	Digits and spaces-
3.	Shortest path-[11]
4.	String copy, compare, concat
5.	Largest String-[11]
6.	Check Palindrome-[64]
7.	String class
8.	String compression-[11]
9.	Run length encoding
10.	Permutation
11.	Remove duplicates
12.	Vowel Find
13.	Binary string to number
14.	Searching inside string
15.	Warmup:search all
16.	Space20
17.	Tokenisation (sstream)
18.	Tokenisation (Strtok)
19.	Design owner tokenizer
20.	String key sort
21.	Checksubset
22.	Sort subsequences-[63]
23.	Digital Clock
24.	Biggest Number String-[63]
25.	Run length encoding
26.	Palindrome Break-[64]
27.	String Normalisation
28. 	Optimal Partition of string - (LC medium-gorseet)[done in new pg]

4.	2D Arrays

1.	Intro and basics -[11]
2.	2d char arr-[11]
3.	Spiral print-[11]
4.	Wave print
5.	Sorted array search-[12]
6.	Mango trees-[12]
7.	Pascal’s triangle - [66]
8.	Submatrix sum - [67]
9.  2d array merge - [69]

5.	Pointers and dynamic Memory [done earlier]

1.	Address of Operator
2.	Pointers
3.	Dereference operators
4.	Reference Variables
5.	Pass by reference – Reference variables
6.	Pass by reference – pointers
7.	Dynamic Memory Allocation
8.	Using new and Delete
9.	2d Dynamic Arr-[14]

6.	Sliding Window

1.	Intro - [64]
2.	Housing (two pointers) - [64]
3.	Unique Substr (hashing) - [65]
4.	String Window - [65]
5.	Smallest Distinct Window - [66]
6.	Sliding window max - [68]
7.	Count subarr with target sum - [69]

7.	Bit Manipulation

1.	Bitwise operators-[15,16]
2.	Left shift and right shift-[16]
3.	Odd even-[17]
4.	Get ith bit-[17]
5.	Set ith bit-[17]
6.	Clear ith bit-[17]
7.	Update ith bit-[17]
8.	Clear last I bits-[17]
9.	Clear range of Bits-[18]
10.	Replace Bits-[18]
11.	Two power-[18]
12.	Count bits-[19]
13.	Fast exponentiation-[19]
14.	Make it binary-[19]
15.	Xoring
16.	Modulo Exponentiation
17.	Earth levels
18.	Subset sum queries
19.	Sqroot (LC-easy, Jaideep)

8.	Recursion Basics and Backtracking

1.	Intro-[20]
2.	Factorial-[20]
3.	Fibonacci series-[20]
4.	Sorted array check-[20]
5.	First occurrence-[21]
6.	Last occurrence-[21]
7.	All occurrence-
8.	Print Increasing numbers
9.	Power func-[21]
10.	Power func optimized-[22]
11.	Bubble sort-[22]
12.	Number spell-[22]
13.	Tiling problem-[22]
14.	Binary strings-[23]
15.	Friends party-[23]
16.	Ladders
17.	Subset sum to X -[68,74]
18.	Generate brackets-[74]
19.	Smart keypad-[74]
20.	N queen-[27]
21.	N queen ways-[27]
22.	Grid Ways-[28]
23.	Sudoku-[28]
24.	Modulo Exponentiation
25.	Game of coins
26.	Rat in a maze
27.	Longest Possible route
28.	Word break - [73]
29.	Unique subset-
30.	Word search
31. Finding Subsets-[25]
32. Ordering subsets-[26],just sort above
33. Permutations-[26,75]
34. Array filling-[25]

9.	Space and time complexity analysis [done earlier]

1.	Experimental
2.	Big O notation
3.	Nested Loops
4.	Loops example
5.	Analysis: bubble sort, bin search, merge sort
6.	Time complexity for recursive problems

10.	Object Oriented Prog

1.	Classes and objs-[31]
2.	Getters and setters-[31]
3.	Constructor/ obj initialization-[32]
4.	Copy Constructor-[32]
5.	Shallow and deep copy-[32]
6.	Copy assignment operator-[32]
7.	Destructor-[32]
8.	Shopping Cart using OOPs-[57]

11.	Linked List

1.	LL intro-[33]
2.	Push front-[33]
3.	Push back-[33]
4.	Print-[33]
5.	Insert -[33]
6.	Insert in Middle-[33]
7.	Searching-[33]
8.	Recursive search-[33]
9.	Deletion-[34]
10.	Pop front-[34]
11.	Delete tail-[34]
12.	Reverse LL recursive-[34,75]
13.	Reverse LL iterative-[34]
14.	K-reverse LL - [75]
15.	Merge two sorted LL - [76]
16.	Runner technique to find middle - [76]
17.	Kth last element -
18.	Alternate Merge
19.	Bubble Sort on LL
20.	Merge sort on LL - [76]
21.	Detect cycle in LL

12.	Stacks 

1.	Stacks DS-[35]
2.	Stacks implementation-[35]
3.	Using LL, Vector, STL-[35]
4.	Insert at bottom -[35]
5.	Reverse recursively-[36]
6.	Stock span-[36]
7.	Next greater Element
8.	Duplicate parentheses
9.	Balanced paranthesis - [76]
10.	Redundant paranthesis - [76]
11.	Max subarray(Sliding window + deque)
12.	Simplify path - [77]
13.	Max rectangular area in Histogram
14.	Queue intro, implement-[37]
15.	Using Circular Array-[37]
16.	Queue STL-[37]
17.	Stack using 2 queues-[37]
18.	First non repeating letter - [76]
19.	Interleave two halves of queue

13.	Binary Tree

1.	Intro-[38]
2.	Build preorder-[38]
3.	Preorder-[38]
4.	Inorder-[38]
5.	Postorder-[38]
6.	Level order-[38]
7.	Build levelorder-[39]
8.	Height of the tree-[40]
9.	Kth level-
10.	Sum of Nodes
11.	Tree Diameter 1-[40]
12.	Tree diameter 2-[40]
13.	Min depth
14.	Symmetric tree-1 
15.	Symmetric tree-2 (using my approach: horizontal and vertical height)(Ankush bhaiya)
16.	Expression tree
17.	Remove half nodes
18.	Target Path sum
19.	Replace with descendant sum - [77]
20.	Height balanced tree(check) - [77]
21.	Max susbset sum tree - [77]
22.	Print at level K - [77]
23.	Nodes at distance K - [78]
24.	Vertical Order print // opposite of level order print - [78]
25.	Left View (ankush bhaiya: Right view, top view)
26.	Sibling Swap - []
27. Sum root to leaf (LC medium- Gorseet)
28. Node left oright sibling (ankush bhaiya)


14.	BST

1.	Intro-[40]
2.	BST creation-[40]
3.	Searching-[41]
4.	Deletion-[41]
5.	Print in Range-[41]
6.	Root to leaf-[42]
7.	Mirror a BST
8.	isBST?
9.	Delete in BST
10.	Min height in bst - [79]
11.	Closest in bst - [79]
12.	Tree to LL - [79]
13.	Inorder Successor - [79]
14.	SpecialBSTs
15.	LCA
16.	Shortest tree path

15.	Heaps/ Priority Queue

1.	Intro-[42]
2.	Heap vs other DS-[42]
3.	Heap as CBT-[42]
4.	As Arrays-[42]
5.	Insertion-[43]
6.	Remove min/max-[43]
7.	Max product-
8.	STL-[44]
9.	Nearby Cars -[44]
10.	Reduced array size to half- 
11.	Weakest Rows
12.	Relative ranks
13.	Sort using heaps-
14.	Merging ropes - [80]
15.	Running median - [80]
16.	Merge k sorted arrays - [80]
17.	Top K frequent elements (Sorted) - [in new notes]
18.	Top K frequent elements (Unsorted) - [in new notes] leetcode

16.	Hashing

1.	Intro-[45]
2.	Hash functions-[45]
3.	Collision handling-[45]
4.	Hashing Code -1 //setup-[45]
5.	Hashing Code -2// Insertion-[46]
6.	Hashing Code -3//rehashing-[46]
7.	Testing -[46]
8.	Search-[46]
9.	Erase-[47]
10.	Operator Overloading-[47]
11.	Unordered maps and sets-[47]
12.	Array intersection-
13.	K sum subarray
14.	Triplets - [80]
15.	Counting rectangles - [81]
16.	Counting triangles - [81]
17.	Anagrams in substring - [81]
18.	Quick Brown Fox - [81]
19.	Break the chain
20.	Min bars
21.	Group Anagrams
22. 	Longest Consecutive Sequence (LC Medium - gorseet)
23.	Next greater element - (LC easy - gorseet)

17.	Trie 

1.	Intro-[47]
2.	Class-[47]
3.	Insertion-[47]
4.	Searching-[48]
5.	Queries-[48]
6.	Prefix String
7.	Suffix trie - [82]
8.	Cute little cat(trie + hashing) - [82]
9.	Biggest XOR - [82]
10.	Max XOR pair
11.	PNG googly strings
12.	Phone number search

18.	Graphs

1.	Intro-[49]
2.	Applications-[49]
3.	Adjacency list rep-[49]
4.	BFS-[51,83]
5.	DFS-[51]
6.	Topological Sort (BFS)-[50]
7.	Kahn’s algo-
8.	Dijkshtra algo-[52]
9.	Keys and Rooms
10.	All paths from source to target
11.	Find star in graph
12.	Cycle detection in undirected graphs - [83]
13.	Backedge detection - [84]
14.	Snake and ladder - [83]
15.	Board game (trie +backtrack + graph) - [84]
16.	Shortest grid - [84]
17.	Largest Island - [85]
18.	Astronaut pairs
19.	Graph sequence (graph + DP) - [85]

19.	Dynamic Programming (all top down and bottom up, even if not given still do)

1.	Intro and basics-[53]
2.	Coin Change-[54]
3.	Longest Common Subsequence (top down and bottom up)
4.	Longest Increasing Subsequence-[54]
5.	Knapsack (top down and bottom up)-[55]
6.	Wines-[56]
7.	Wines -2-[56]
8.	Vacation-
9.	Optimal Game Strategy- 
10.	Minimum Partitioning-
11.	N-K ladders - [86]
12.	Cutting Rods - [86]
13.	Min array jumps - [87]
14.	Frogs min cost (top down and bottom up) - [87]
15.	Max non adjacent sum - [88]
16.	Box stacking problem - [88]
17.	Counting trees (top down and bottom up) - [88]
18.	Counting subsequences (top down and bottom up) - [90]
19.	Game of wits
20.	Mixtures – SPOJ
21.	Edit Distance
22.	Wildcard pattern matching
23.	Palindromic partitioning
24. 	NinjaTraining (codingninja -divyam)
25.	Basketball_select(cvent)

